{"version":3,"file":"index.test.js","sourceRoot":"","sources":["index.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AACzD,OAAO,SAAS,MAAM,UAAU,CAAC;AACjC,qCAAqC;AACrC,yEAAyE;AAGzE,IAAM,UAAU,GAAG,UAAC,MAAW;IAC3B;;;2BAGuB;IACvB,GAAG,CAAC;QACA;;;;gDAIwC;QACxC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,aAAa;IAC7C,CAAC,CAAC,CAAA;AACN,CAAC,CAAA;AAED;;wDAEwD;AAExD,QAAQ,CAAC,WAAW,EAAE;IAClB,cAAc;IACd,EAAE,CAAC,mBAAmB,EAAE;QACZ,IAAA,MAAM,GAAK,UAAU,CAAC,cAAM,OAAA,SAAS,EAAE,EAAX,CAAW,CAAC,OAAlC,CAAkC,CAAC,SAAS;QAC1D;;sCAE8B;QAC9B,2CAA2C;QAC3C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAA,CAAC,SAAS;IACnD,CAAC,CAAC,CAAA;IAEF,eAAe;IACf,EAAE,CAAC,iBAAiB,EAAE;QACV,IAAA,MAAM,GAAK,UAAU,CAAC,cAAM,OAAA,SAAS,CAAC,OAAO,CAAC,EAAlB,CAAkB,CAAC,OAAzC,CAA0C,CAAC,QAAQ;QACjE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,CAAC,QAAQ;QAEhD,UAAU,CAAC,MAAM,CAAC,CAAA,CAAC,aAAa;QAChC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAA,CAAC,mBAAmB;QAEzD,GAAG,CAAC;YACA,cAAc;YACd,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,CAAC,OAAO;QAG/C,GAAG,CAAC;YACA,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,eAAe;QACjD,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,OAAO;IAClD,CAAC,CAAC,CAAA;IAEF,kBAAkB;IAClB,EAAE,CAAC,kBAAkB,EAAE;QACX,IAAA,MAAM,GAAK,UAAU,CAAC,cAAM,OAAA,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,EAA3B,CAA2B,CAAC,OAAlD,CAAmD,CAAC,SAAS;QAC3E,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY;QAChC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa;QAEtD,GAAG,CAAC;YACA,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ;QAC5C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;QAElD,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW;QAC/B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa;IAC1D,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAA","sourcesContent":["import { act, renderHook } from \"@testing-library/react\";\r\nimport useToggle from \"../index\";\r\n// import { describe } from \"vitest\";\r\n// 到 tsconfig.json 配置中加上 \"types\": [\"vitest/globals\"]，使ts能够找到vitest定义全局API\r\n\r\n\r\nconst callToggle = (result: any) => {\r\n    /* react 测试工具函数\r\n    用于包裹所有会触发组件状态更新的操作（如事件触发、异步请求等），\r\n    确保测试与React的更新机制同步执行，\r\n    避免状态更新未被正确处理导致的警告或错误 */\r\n    act(() => {\r\n        /* result.current \r\n        是 React 测试库（如 @testing-library/react-hooks）提供的引用对象，\r\n        始终指向 Hook 的最新返回值,\r\n        在useToggle中定义了结果是返回当前状态和操作对象，return [state, actions];\r\n        所以result.current[1]能够使用useToggle提供的行为 */\r\n        result.current[1].toggle(); // 执行toggle方法\r\n    })\r\n}\r\n\r\n/* 自定义 Hook 测试的本质：\r\n‌“调用方法 → 触发状态/行为变更 → 断言结果”‌。\r\n需覆盖‌同步/异步、正常/异常、上下文依赖‌等场景，结合 Vitest 的模拟和断言能力，验证其逻辑可靠性 */\r\n\r\ndescribe('useToggle', () => {\r\n    // 测试场景1：初始化逻辑\r\n    it('toggle on initial', () => {\r\n        const { result } = renderHook(() => useToggle()) // 不传参初始化\r\n        /* expect API \r\n        在 Vitest 中的核心作用是‌对代码行为是否符合预期进行断言验证‌\r\n        当实际值与匹配器规则冲突时，自动抛出可读性强的错误报告 */\r\n        // 这种是‌链式匹配验证，.toBeFalsy() 相当于 .toBe(false)\r\n        expect(result.current[0]).toBeFalsy() // 断言初始状态\r\n    })\r\n\r\n    // 测试场景2：方法调用测试\r\n    it('test on methods', () => {\r\n        const { result } = renderHook(() => useToggle('Hello')); // 设置初始值\r\n        expect(result.current[0]).toBe('Hello') // 验证初始值\r\n\r\n        callToggle(result) // 触发toggle方法\r\n        expect(result.current[0]).toBeFalsy() // 验证触发toggle方法后结果值\r\n\r\n        act(() => {\r\n            // 调用setLeft方法\r\n            result.current[1].setLeft();\r\n        });\r\n        expect(result.current[0]).toBe('Hello') // 验证结果\r\n\r\n\r\n        act(() => {\r\n            result.current[1].setRight(); // 调用setRight方法\r\n        });\r\n        expect(result.current[0]).toBeFalsy(); // 验证结果\r\n    })\r\n\r\n    /* 测试场景3：可选参数测试 */\r\n    it('test on optional', () => {\r\n        const { result } = renderHook(() => useToggle('Hello', 'World')); // 双参数初始化\r\n        callToggle(result); // 第一次toggle\r\n        expect(result.current[0]).toBe('World'); // 应切换到第二个参数值\r\n\r\n        act(() => {\r\n            result.current[1].set('World'); // 显式设置值\r\n        });\r\n        expect(result.current[0]).toBe('World'); // 应保持当前值\r\n\r\n        callToggle(result); // 再次toggle\r\n        expect(result.current[0]).toBe('Hello'); // 应切换回第一个参数值\r\n    });\r\n})"]}