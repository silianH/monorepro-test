{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAwB1C,UAAU;AACV,SAAS,SAAS,CAAO,YAAuC,EAAE,YAAgB;IAAzD,6BAAA,EAAA,eAAkB,KAAqB;IAC5D,qCAAqC;IAC/B,IAAA,KAAoB,QAAQ,CAAQ,YAAY,CAAC,EAAhD,KAAK,QAAA,EAAE,QAAQ,QAAiC,CAAC;IAExD,gCAAgC;IAChC,IAAM,OAAO,GAAG,OAAO,CAAC;QACpB,iDAAiD;QACjD,IAAM,kBAAkB,GAAG,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAU,CAAC;QAEhG,wDAAwD;QACxD,IAAM,MAAM,GAAG,cAAM,OAAA,QAAQ,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,KAAK,YAAY,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,YAAY,CAAC,EAAxD,CAAwD,CAAC,EAAzE,CAAyE,CAAC;QAE/F,mBAAmB;QACnB,IAAM,GAAG,GAAG,UAAC,KAAY,IAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC;QAE9C,SAAS;QACT,IAAM,OAAO,GAAG,cAAM,OAAA,QAAQ,CAAC,YAAY,CAAC,EAAtB,CAAsB,CAAC;QAE7C,SAAS;QACT,IAAM,QAAQ,GAAG,cAAM,OAAA,QAAQ,CAAC,kBAAkB,CAAC,EAA5B,CAA4B,CAAC;QAEpD,OAAO;YACH,MAAM,QAAA;YACN,GAAG,KAAA;YACH,OAAO,SAAA;YACP,QAAQ,UAAA;SACX,CAAC;IACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,mBAAmB;IAE3B,cAAc;IACd,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC5B,CAAC;AAED,eAAe,SAAS,CAAC","sourcesContent":["import { useMemo, useState } from 'react';\r\n// 状态值切换 hook\r\n\r\n// 定义操作接口，包含四个操作方法\r\nexport interface Actions<T> {\r\n    setLeft: () => void // 设置为默认值\r\n    setRight: () => void // 设置为反向值\r\n    set: (value: T) => void // 手动设置任意值\r\n    toggle: () => void // 切换当前状态\r\n}\r\n\r\n/* TypeScript 特有的函数重载(Overload)写法\r\n允许为同一个函数提供多个类型声明，以支持不同的参数组合和返回类型 */\r\n\r\n// 1. 无参数调用，默认使用boolean类型，初始值为false\r\nfunction useToggle<T = boolean>(): [boolean, Actions<T>];\r\n\r\n// 2. 提供默认值调用，返回与默认值相同类型的值\r\nfunction useToggle<T>(defaultValue: T): [T, Actions<T>];\r\n\r\n// 3. 提供默认值和反向值调用，返回两者联合类型的值\r\nfunction useToggle<T, U>(defaultValue: T, reverseValue: U): [T | U, Actions<T | U>];\r\n\r\n\r\n// Hook 实现\r\nfunction useToggle<D, R>(defaultValue: D = false as unknown as D, reverseValue?: R) {\r\n    // 使用 useState 管理状态，初始值为 defaultValue\r\n    const [state, setState] = useState<D | R>(defaultValue);\r\n\r\n    // 使用 useMemo 缓存操作函数，避免每次渲染都重新创建\r\n    const actions = useMemo(() => {\r\n        // 计算反向值：如果没有提供 reverseValue，则取 defaultValue 的逻辑非\r\n        const reverseValueOrigin = (reverseValue === undefined ? !defaultValue : reverseValue) as D | R;\r\n\r\n        // 定义切换函数：当前值是 defaultValue 则切换到 reverseValueOrigin，反之亦然\r\n        const toggle = () => setState((s) => (s === defaultValue ? reverseValueOrigin : defaultValue));\r\n\r\n        // 定义直接设置函数：可以设置任意值\r\n        const set = (value: D | R) => setState(value);\r\n\r\n        // 设置到默认值\r\n        const setLeft = () => setState(defaultValue);\r\n\r\n        // 设置到反向值\r\n        const setRight = () => setState(reverseValueOrigin);\r\n\r\n        return {\r\n            toggle,\r\n            set,\r\n            setLeft,\r\n            setRight,\r\n        };\r\n    }, []); // 空依赖数组确保这些函数只创建一次\r\n\r\n    // 返回当前状态和操作对象\r\n    return [state, actions];\r\n}\r\n\r\nexport default useToggle;"]}